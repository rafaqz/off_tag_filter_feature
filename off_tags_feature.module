<?php
/**
 * @file
 * Code for the OFF Tags Feature feature.
 */

include_once 'off_tags_feature.features.inc';

/**
 * Implements hook_init().
 * 
 * Set a tag context for view filtering. 
 */
function off_tags_feature_init() { 
  // Set tag filter context
  if ($flag = flag_get_flag('tag_filter')) { 
    global $user;
    $result = db_select('flagging', 'f')
      ->condition('f.uid', $user->uid, "=")
      ->condition('f.fid', $flag->fid, "=")
      ->fields("f")
      ->execute();
    $fid = array();
    foreach($result as $row) {
      $fids[$row->entity_id] = $row->entity_id;
    }
    if (!empty($fids)) {
      context_set('off_tags_feature', 'tag_filter', implode($fids, '+'));
    }
  }
}

/**
 * Implements hook_system_info_alter().
 */
function off_tags_feature_system_info_alter(&$info, $file, $type) {
  // We dynamically add field_tags to content types that implement
  // integration. We must add a corresponding line for each field
  // instance to off_tags_feature.info so that Features is aware of the instance
  // and can sucessfully revert the field_instance component back to its
  // default state.
  if ($file->name == 'off_tags_feature') {
    $entity_types = off_tags_feature_get_entity_types_with_tags();
    if (!empty($entity_types)) {
      foreach ($entity_types as $entity_type => $bundles) {
        foreach(array_keys($bundles) as $bundle) {
          $info['features']['field_instance'][] = "$entity_type-$bundle-field_tags";
        }
      }
    }
  }
}

/**
 * Returns an array of entity types that are enabled via collabco integration.
 */
function off_tags_feature_get_entity_types_with_tags() {
  // Find all Commons Entity integrations.
  $integrations = module_invoke_all('collabco_integration');
  $entities = array();
  foreach ($integrations as $integration) { 
    if (empty($integration['entity']['node'])) {
      continue;
    }
    foreach ($integration['entity'] as $entity_type) {
      foreach ($entity_type as $bundle => $options) {
        if (!isset($options['exclude_tags']) || $options['exclude_tags'] == FALSE) {
          $entities['node'][$bundle] = $options;
        }
      }
    }
  }
  return $entities;
}

/**
 * Implements hook_features_pipe_alter().
 */
function off_tags_feature_features_pipe_alter(&$pipe, $data, $export) {
  if (!empty($pipe['field_instance'])) {
    foreach ($pipe['field_instance'] as $delta => $value) {
      $args = explode('-', $value);
      $field_name = $args[2];
      if ($field_name == 'field_tags') {
        unset($pipe['field_instance'][$delta]);
      }
    }
  }
}
